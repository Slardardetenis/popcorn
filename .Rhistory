shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?factor
shiny::runApp()
shiny::runApp()
model2
plot(model2)
plot(model2)
plot(model3)
shiny::runApp()
plot(data2)
runApp()
fator
dataset
shiny::runApp()
mean(fator)
fator
mean(data1)
mean(data1$oleo)
means <- c(mean(data1$oleo,data1$azeite,data1$marg,data1$mant))
means <- c(mean(data1$oleo),mean(data1$azeite),mean(data1$marg),mean(data1$mant))
means
aov
model2
means
barplot(means)
p1 <- nPlot(model2, group = 'cyl', data = mtcars, type = 'scatterChart')
p1$xAxis(axisLabel = 'Weight (in lb)')
p1
library(rCharts)
p1 <- nPlot(model2, group = 'cyl', data = mtcars, type = 'scatterChart')
p1$xAxis(axisLabel = 'Weight (in lb)')
p1
nplot(model2)
ae <- nplot(model2)
?nplot
require(devtools)
install_github('rNVD3', 'ramnathv')
install_github('ramnathv/rNVD3')
isntall.packages("rjson")
install.packages("rjson")
install_github('ramnathv/rNVD3')
library(rNVD3)
require(rNVD3)
install_github('ramnathv/rNVD3')
library(rNVD3)
?nplot
nplot(model2)
shiny::runApp()
runGithub("popcorn","slardardetenis")
library(shiny)
runGithub("popcorn","slardardetenis")
runGitHub("popcorn","slardardetenis")
runGitHub("multcompar","slardardetenis")
runGitHub("dashshiny","slardardetenis")
runGitHub("popcorn","slardardetenis")
runGitHub("dashshiny","slardardetenis")
shiny::runApp()
dataset
model3
model3
C.test(model3)
library(lmtest)
C.test(model3)
C.test(MASS)
library(MASS)
library(GAD)
C.test(model3)
View(dataset)
model <- lm(daset$pirua~as.factor(dataset$fator),data=dataset)
model <- lm(dataset$pirua~as.factor(dataset$fator),data=dataset)
model
model <- lm(dataset$pirua~as.factor(dataset$fator),data=dataset,weight=1/(2*dataset$pirua))
model
residuals(model)
stdres(model)
plot(stdres(model))
plot(fitted(model),res(model))
plot(fitted(model),residuals(model))
model
model <- aov(dataset$pirua~as.factor(dataset$fator),data=dataset,weight=1/(2*dataset$pirua))
model
plot(fitted(model),residuals(model))
model <- aov(log(dataset$pirua)~as.factor(dataset$fator),data=dataset)
model
plot(fitted(model),residuals(model))
C.test(model)
ls(model)
model$coefficients
model3$coefficients
model3
model
newdata <- cbind(dataset,log(dataset$pirua))
View(newdata)
names(newdata) <-
names(newdata) <- c("fator","perua","log(perua)")
View(newdata)
shiny::runApp()
View(newdata)
model
model1
model1 <model
model1 <- model
model1
model
model
model1
model2
model3
rm(model3)
model4
model3 <- model4
model4
plot(fitted(model3),residuals(model3))
C.test(model)
model1
model <- aov(dataset$perua~dataset$fator,data=dataset)
model <- aov(dataset$perua~as.factor(dataset$fator),data=dataset)
model <- aov(dataset$perua~as.factor(dataset$fator),data=dataset)
dataset
View(dataset)
names(dataset) <- c("fator","pirua")
names(dataset)
model <- aov(dataset$perua~as.factor(dataset$fator),data=dataset)
fator
View(dataset)
names(dataset) <- c("fator","perua")
model <- aov(dataset$perua~as.factor(dataset$fator),data=dataset)
model
plot(model)
ls(model)
plot(fitted(model))
fitted(model)
fitted.values(model)
rank(model)
qr(model)
ls(model)
assing(model)
assign(model)
model$assign
model$call
b <- model$call
b
b
rm(b)
b
ls(model)
model$terms
View(newdata)
View(dataset)
model
model1
dwtest(model)
dwtest(model1)
model1
dwtest(model)
qqnorm(data1$oleo)
qqline(data1$oleo)
qqnorm(data1$azeite)
qqline(data1$oleo)
runApp()
model1
model
boxcox(model1)
library(MASS)
boxcox(model)
?boxcox
boxcox(model,lambda=seq(-0.05,0.05))
boxcox(model,lambda=seq(-0.05,0.05,0.1))
boxcox(model)
boxcox(model,lambda=seq(-0.5,0.5,0.1))
boxcox(model,lambda=seq(-0.2,0.2,0.1))
shiny::runApp()
shiny::runApp()
?envelope
envelope(model2)
envelope(residuals(model2))
?envelope
b <- envelope(model2)
?qqnorm
qqnorm(residuals(model2))
qqline(residuals(model2))
shiny::runApp()
plot(residuals(model1))
model1
plot(residuals(model))
shiny::runApp()
qqnorm(data1$oleo)
shiny::runApp()
?dwtest
dwtest(model2)
model2
model1
dwtest(model1)
shiny::runApp()
?shapiro.test
shapiro.test(residuals(model1))
model1
shapiro.test(residuals(model2))
model2
model1
shapiro.test(model1)
shapiro.test(residuals(model1))
shapiro.test(residuals(model2))
model2
summary(model2)
summary(model2)
lin1 <lm(dataset$perua~as.factor(dataset$fator),data=dataset)
lin1 <-lm(dataset$perua~as.factor(dataset$fator),data=dataset)
lin1
summary(lin1)
lin2 <-lm(log(dataset$perua)~as.factor(dataset$fator),data=dataset)
summary(lin2)
shiny::runApp()
model1
model2
model
plot(residuals(model))
plot(residuals(model1))
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinythemes")
require(shinythemes)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
model
model1
model2
is model2 ==model1
model1
fator
qqnorm(fator)
?boxcox
boxcox(model1,col="red")
boxcox(model1)
model1
boxcox(model)
boxcox(model,col="red")
plot(boxcox(model))
plot(boxcox(model),pch=20)
boxcox(model)
test
test1
shiny::runApp()
?HSD.test
model1
vari <- HSD.test(model1,fator)
df <- df.residual(model1)
df
deviance(model1)
model1
deviance(model1)/df
MERes <- deviance(model1)/df
MERes
model1
vari <- HSD.test(model1,fator,df,MERes,group=TRUE)
vari
vari
HSD.test(model1,fator,df,MERes,group=TRUE)
HSD.test(model1,fator,df,MERes,group=TRUE)
model1
summary(vari)
fator
HSD.test(model1,fator,df,MERes,group=TRUE)
vari
df
MERes
HSD.test(model1,fator,df,MERes,group=T)
shiny::runApp()
HSD.test(model1,fator,df,MERes,group=T)
require(multcomp)
HSD.test(model1,fator,df,MERes,group=T)
HSD.test(model,fator,df,MERes,group=T)
vari
ls(vari)
?glht
tuk <- glht(model1,linfct=mcp(fator="Tukey"))
model1
fator
perua
rm(model)
rm(model1)
rm(model2)
rm(model3)
rm(model4)
ls()
dataset
View(data2)
rm(data2)
fator
perua
attach()
search()
model1 <- aov("dataset$perua~as.factor(fator),dataset)
)
model1 <- aov("dataset$perua~as.factor(fator),data=dataset)
model1 <- aov(dataset$perua~as.factor(fator),data=dataset)
model1 <- aov(dataset$perua~as.factor(fator),data=dataset)
model1
fitted(model1)
plot(model1$fitted)
df
HSD.test(model1,fator,df,MERes,group=TRUE)
fator
HSD.test(model1,as.factor(dataset$fator),df,MERes,group=TRUE)
model1 <- aov(dataset$perua~as.factor(dataset$fator),data=dataset)
HSD.test(model1,as.factor(dataset$fator),df,MERes,group=TRUE)
glht(model1,linfct=mcp(fator="Tukey"))
glht(model1,linfct=mcp(as.factor(dataset$fator)="Tukey"))
vari <-HSD.test(model1,as.factor(dataset$fator),df,MERes,group=TRUE)
vari
anova
summary(model1)
glht(model1,linfct=contr)
contr
tuk <- glht(model1,linfct=contr)
plot(confint(tuk,level=0.95))
scheff <- scheffe.test(model1,"fator",group=T,console=T)
summary(scheff)
scheff
attach(dataset)
fator
scheff <- scheffe.test(model1,"fator",group=T,console=T)
scheffe.test(model1,"fator",group=T,console=T)
plto(scheff)
plot(scheff)
vari
tuk
shiny::runApp()
ls(tukey)
ls(tuk)
tuk$model
tuk$linfct
ls(tuk)
model <- aov(perua~as.factor(fator),data=dataset)
tuu <- glht(model,linfct=contr)
tuu
plot(confint(tuu,level=0.95))
means
means <- c(mean(dataset$oleo),mean(dataset$azeite),mean(dataset$marg),mean(dataset$mant))
means
mean(dataset$oleo)
means <- c(mean(data1$oleo),mean(data1$azeite),mean(data1$marg),mean(data1$mant))
means
mean(data1$marg)
data1$marg
View(data1)
data1 <- read.table("pipocatrad.txt",h=T)
data1
means <- c(mean(data1$oleo),mean(data1$azeite),mean(data1$marg),mean(data1$mant))
means
View(dataset)
tuu
tuk
ls(tuk)
tuu$model
tuk$model
model1
model
model1 <- aov(log(perua)~as.factor(fator),dataset)
tuk <- glht(model1,)
model1
tuk <- glht(model1,linfct=contr)
plot(confint(tuk,level=0.95))
summary(tuk)
shiny::runApp()
contr
shiny::runApp()
shiny::runApp()
summary(tuk)
vari <- summary(tuk)
ls(vari)
ls$test
vari$test
shiny::runApp()
shiny::runApp()
model
anova(model)
model1
anova(model1)
shiny::runApp()
anova(model)
anova(model1)
model
model1
summary(model1)
summary(model)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(model)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='slardardetenis', token='F066A58B5DAED93FA00BC69A0BF43E36', secret='i+vvhXVRDMf2i5ngqeh/qtJNkpxBknX8DMwrfib/')
deployApp()
livrary(devtools)
livrary(devtolls)
library(devtools)
deployApp()
library(shinyapps)
deployApp()
install.packages("BiocInstaller")
shiny::runApp()
require(shinyapps)
deployApp()
install.packages("BiocInstaller")
source("http://bioconductor.org/biocLite.R")
biocLite()
shiny::runApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tuk
tuu
plot(confint(tuk,level=0.95))
plot(confint(tuu,level=0.95))
ls(tuk)
tuk$df
tuk$type
tuk$vcov
ls(tuk)
tuk$rhs
tuk$linfct
ls(tuk)
tuk$type
tuk$infct
tuk$coef
tuk$alternative
tuk$model
shiny::runApp()
?HSD.test
tukey <- HSD.(mod)
model
model1
tukey <- HSD.(model1,fator,df,MERes,group=T)
tukey <- HSD.test(model1,fator,df,MERes,group=T)
tukey
fator
df
MERes
tukao <- HSD.test(model1,fator,df,MERes,group=TRUE)
tukao
ls(tukao)
tukao <- HSD.test(model1,"fator",df,MERes,group=TRUE)
tukao
tukao <- HSD.test(model1,"fator",df,MERes,group=TRUE)
tukao <- HSD.test(model1,"fator",df,MERes,group=TRUE,console=T)
tukao
tukao <- HSD.test(model1,fator,df,MERes,group=TRUE,console=T)
tukao
ls(tukao)
tukao$groups
library(agricolae)
tukao <- HSD.test(model1,fator,df,MERes,group=TRUE,console=T)
tukao
tukao <- HSD.test(model1,fator,df,MERes,group=F,console=T)
tukao
tukao <- HSD.test(model1,fator,df,MERes,group=T,console=T)
tukao
tukao <- HSD.test(model1,"fator",df,MERes,group=T,console=T)
tukao
fuckkku
compar <- scheffe.test(model1,"fator",group=T,console=T)
compar
compar <- scheffe.test(model1,fator,group=T,console=T)
comapr
compar
model1
compar <- scheffe.test(model1,fator,group=T,console=T)
ls(compar)
fatao <- as.numeric(fator)
fatao
compar <- scheffe.test(model1,fatao,group=T,console=T)
compar
compar <- scheffe.test(model1,"fatao",group=T,console=T)
compar
fatao
compar <- scheffe.test(model,fator,group=T,console=T)
compar
compar <- scheffe.test(model,"fator",group=T,console=T)
compar
?scheffe.test
HSD.test(model1,trt=fator,group=T,console=T)
HSD.test(model1,trt=fatao,group=T,console=T)
HSD.test(model1,trt=as.factor(),group=T,console=T)
View(dataset)
HSD.test(model1,trt=as.factor(dataset$fator),group=T,console=T)
shiny::runApp()
deploy
require(shinyapps)
deploy
deployApp()
